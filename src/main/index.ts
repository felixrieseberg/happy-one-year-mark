import { app, BrowserWindow, ipcMain, shell, safeStorage } from 'electron';
import * as fs from 'fs';
import * as path from 'path';
// Webpack entry points generated by Forge
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

if (require('electron-squirrel-startup')) {
  app.quit();
}

const chatWindows = new Map<string, BrowserWindow>();

const createWindow = (): void => {
  const mainWindow = new BrowserWindow({
    height: 700,
    width: 250,
    frame: false,
    transparent: true,
    roundedCorners: false,
    acceptFirstMouse: true,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  
  mainWindow.setTitle('Mark Instant Messenger');


  mainWindow.webContents.setWindowOpenHandler(({ url, features }) => {
    
    if (url.startsWith('http') && url !== 'about:blank') {
      shell.openExternal(url);
      return { action: 'deny' };
    }

    const width = parseInt(features.match(/width=(\d+)/)?.[1] || '400', 10);
    const height = parseInt(features.match(/height=(\d+)/)?.[1] || '500', 10);
    

    return {
      action: 'allow',
      overrideBrowserWindowOptions: {
        width,
        height,
        frame: false,
        transparent: false,
        backgroundColor: '#ffffff',
        roundedCorners: false,
        minHeight: 300,
        minWidth: 300,
        acceptFirstMouse: true,
        webPreferences: {
          preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
          contextIsolation: true,
          nodeIntegration: false
        }
      }
    };
  });

  mainWindow.webContents.on('did-create-window', (childWindow, details) => {
    childWindow.show();
    childWindow.focus();
    
    if (details.frameName && details.frameName.startsWith('Instant Message with')) {
      childWindow.setTitle(details.frameName);
      chatWindows.set(details.frameName, childWindow);
      
      childWindow.on('closed', () => {
        chatWindows.delete(details.frameName);
      });
    }
    
  });

  ipcMain.on('window-minimize', (event) => {
    const window = BrowserWindow.fromWebContents(event.sender);
    if (window) {
      window.minimize();
    }
  });

  ipcMain.on('window-maximize', (event) => {
    const window = BrowserWindow.fromWebContents(event.sender);
    if (window) {
      if (window.isMaximized()) {
        window.restore();
      } else {
        window.maximize();
      }
    }
  });

  ipcMain.on('window-close', (event) => {
    const window = BrowserWindow.fromWebContents(event.sender);
    if (window) {
      window.close();
    }
  });
  
  ipcMain.on('focus-window', (event, windowName) => {
    const targetWindow = chatWindows.get(windowName);
    if (targetWindow && !targetWindow.isDestroyed()) {
      targetWindow.focus();
      targetWindow.show();
    }
  });
  
  ipcMain.on('set-window-title', (event, title) => {
    const window = BrowserWindow.fromWebContents(event.sender);
    if (window) {
      window.setTitle(title);
    }
  });
  
  ipcMain.on('minimize-window-by-title', (event, title) => {
    const targetWindow = chatWindows.get(title);
    if (targetWindow && !targetWindow.isDestroyed()) {
      targetWindow.minimize();
    } else {
    }
  });
  
  ipcMain.handle('store-api-key', async (event, apiKey: string) => {
    if (!safeStorage.isEncryptionAvailable()) {
      throw new Error('Encryption not available');
    }
    const encrypted = safeStorage.encryptString(apiKey);
    const userDataPath = app.getPath('userData');
    const keyPath = path.join(userDataPath, 'anthropic-key');
    fs.writeFileSync(keyPath, encrypted);
    return true;
  });
  
  ipcMain.handle('get-api-key', async () => {
    try {
      const userDataPath = app.getPath('userData');
      const keyPath = path.join(userDataPath, 'anthropic-key');
      
      if (!fs.existsSync(keyPath)) {
        return null;
      }
      
      const encrypted = fs.readFileSync(keyPath);
      if (!safeStorage.isEncryptionAvailable()) {
        throw new Error('Encryption not available');
      }
      return safeStorage.decryptString(encrypted);
    } catch (error) {
      return null;
    }
  });
  
  ipcMain.handle('clear-api-key', async () => {
    try {
      const userDataPath = app.getPath('userData');
      const keyPath = path.join(userDataPath, 'anthropic-key');
      
      if (fs.existsSync(keyPath)) {
        fs.unlinkSync(keyPath);
      }
      return true;
    } catch (error) {
      return false;
    }
  });
  
  ipcMain.on('close-window-by-title', (event, title) => {
    const targetWindow = chatWindows.get(title);
    if (targetWindow && !targetWindow.isDestroyed()) {
      targetWindow.close();
    }
  });
  
  ipcMain.handle('send-claude-message', async (event, message: string, conversationHistory: any[]) => {
    try {
      const userDataPath = app.getPath('userData');
      const keyPath = path.join(userDataPath, 'anthropic-key');
      
      if (!fs.existsSync(keyPath)) {
        throw new Error('API key not set');
      }
      
      const encrypted = fs.readFileSync(keyPath);
      if (!safeStorage.isEncryptionAvailable()) {
        throw new Error('Encryption not available');
      }
      const apiKey = safeStorage.decryptString(encrypted);
      
      if (!apiKey) {
        throw new Error('API key not set');
      }
      
      const { default: Anthropic } = await import('@anthropic-ai/sdk');
      const anthropic = new Anthropic({ apiKey });
      
      const response = await anthropic.messages.create({
        model: 'claude-sonnet-4-20250514',
        max_tokens: 1024,
        messages: [
          ...conversationHistory,
          { role: 'user', content: message }
        ],
        system: "You are Claude, chatting in an AOL Instant Messenger style chat. Keep your responses conversational, friendly, and relatively brief (a few sentences at most). Use casual internet chat style when appropriate."
      });
      
      
      if (response.content[0].type === 'text') {
        return response.content[0].text;
      }
      
      return 'Sorry, I couldn\'t process that response.';
    } catch (error) {
      if (error instanceof Error && error.message?.includes('401')) {
        throw new Error('Invalid API key');
      }
      throw new Error('Failed to send message to Claude');
    }
  });
};

app.on('ready', createWindow);

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

