import { app, BrowserWindow, ipcMain, shell } from 'electron';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

// Store mapping of chat windows
const chatWindows = new Map<string, BrowserWindow>();

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 700,
    width: 250,
    frame: false,
    transparent: true,
    roundedCorners: false,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  
  // Set the main window title
  mainWindow.setTitle('Mark Instant Messenger');

  // Open the DevTools.
  // mainWindow.webContents.openDevTools();

  // Handle window.open() for child windows
  mainWindow.webContents.setWindowOpenHandler(({ url, features }) => {
    console.log('Main process: window.open() called');
    console.log('URL:', url);
    console.log('Features:', features);
    
    // Handle external URLs
    if (url.startsWith('http') && url !== 'about:blank') {
      console.log('Opening external URL:', url);
      shell.openExternal(url);
      return { action: 'deny' };
    }

    // Parse window features
    const width = parseInt(features.match(/width=(\d+)/)?.[1] || '400', 10);
    const height = parseInt(features.match(/height=(\d+)/)?.[1] || '500', 10);
    
    console.log('Creating new window with dimensions:', width, 'x', height);

    return {
      action: 'allow',
      overrideBrowserWindowOptions: {
        width,
        height,
        frame: false,
        transparent: false, // Temporarily disabled for debugging
        backgroundColor: '#ffffff',
        roundedCorners: false,
        minHeight: 300,
        minWidth: 300,
        webPreferences: {
          preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
          contextIsolation: true,
          nodeIntegration: false
        }
      }
    };
  });

  // Add handler for new windows created
  mainWindow.webContents.on('did-create-window', (childWindow, details) => {
    childWindow.show();
    childWindow.focus();
    
    // Set the window title based on the window name
    if (details.frameName && details.frameName.startsWith('Instant Message with')) {
      childWindow.setTitle(details.frameName);
      // Store the window reference
      chatWindows.set(details.frameName, childWindow);
      
      // Clean up when window is closed
      childWindow.on('closed', () => {
        chatWindows.delete(details.frameName);
      });
    }
  });

  // Handle window control IPC messages
  ipcMain.on('window-minimize', () => {
    mainWindow.minimize();
  });

  ipcMain.on('window-maximize', () => {
    if (mainWindow.isMaximized()) {
      mainWindow.restore();
    } else {
      mainWindow.maximize();
    }
  });

  ipcMain.on('window-close', () => {
    mainWindow.close();
  });
  
  // Handle focusing child windows
  ipcMain.on('focus-window', (event, windowName) => {
    console.log('Focusing window with name:', windowName);
    const targetWindow = chatWindows.get(windowName);
    if (targetWindow && !targetWindow.isDestroyed()) {
      targetWindow.focus();
      targetWindow.show();
    }
  });
  
  // Handle setting window title
  ipcMain.on('set-window-title', (event, title) => {
    const window = BrowserWindow.fromWebContents(event.sender);
    if (window) {
      window.setTitle(title);
    }
  });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
